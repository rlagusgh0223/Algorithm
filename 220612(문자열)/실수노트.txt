6.12.
19-1-1
맞춤
------------------------------
19-1-2
유클리드 호제법 알고리즘을 잘 모르겠다
길지 않은 코드니 외우도록 하자
------------------------------
19-1-3
아직 뭐가 뭔지 모르겠다
input안쓰고 sys.stdin.readline으로 하면 동작 안한다
------------------------------
19-2-1
트라이 자료구조
애초에 어떤 형태의 답을 원하는지도 파악되지 않는다
계속해서 공부해야 될 것 같다

========================

6.13.
19-1-1
맞춤
모범답안도 어차피 반복문을 이용해서 하나씩 더하는거라
그냥 파이썬 내장함수로 한번에 더해봤다
이렇게 해도 맞춘걸로 인정되고 시간, 메모리는 차이 없다
--------------------------------
19-1-2
유클리드 호제법을 통한 두 수의 최대공약수를 구하는 함수를 구현하지 못했다
얼추 맞았으므로 내일부터는 맞출 수 있을 것 같다
--------------------------------
19-1-3
if len(left) >= len(bomb):
left는 처음에는 빈 문자열이었다가 하나씩 입력하는 방식이므로, 처음에는 if len(left) >= len(bomb)에 만족하지 못한다
(폭발문자열보다 짧다는건 폭발문자열이 될 수 없다는걸 의미하니까)
그러다가 폭발문자열과 길이가 같아지는 순간 점검에 들어간다


if bomb[i] != left[len(left) - len(bomb) + i]:
len(left) - len(bomb) + i는 0에서부터 시작한다
(처음 이 식을 접할때 left와 bomb의 문자열의 길이는 같으며, i는 0이다)
left에 문자가 하나하나 들어갈 수록 폭발문자열과 비교하는 자리도 뒤로 넘어간다
ex) 2-2+(0,1) = 0,1
     3-2+(0,1) = 1, 2...


if check == True:
모든 폭발문자열과 비교할때 폭발 문자열이 끝날때까지 check를 False로 만들지 않았다면
폭발문자열과 다른게 없다는 뜻이므로 left에서 빼버린다
left는 하나하나 문자를 넣어가며 비교하고 있으므로 현재 left에서 폭발문자열과 같은 부분은 맨 뒷부분이다

--------------------------------
19-2-1
뭔 소린지 문제 자체를 이해하지 못하겠다
다행히 필수적인 요소는 아니라고 하니 부담가지지 말고 공부해보자

========================

6.14.
19-1-1
맞춤
--------------------------------
19-1-2
맞춤
--------------------------------
19-1-3
맞춤
그런데 한번에 맞춘건 아니고 예시 돌려보다가 기억난게 있어서 수정해서 맞췄다
--------------------------------
19-2-1
너무 어렵다
트라이 자료구조를 이해는 하겠는데 코드로 어떻게 풀어야 되는지 모르겠다
해설을 봐도 뭔 소린지 모르겠다

========================

6.15.
19-1-1
맞춤
sys.stdin.readline()으로 리스트를 만들땐 rstrip()을 붙였어야 됐는데
input()으로 할땐 그런거 안해도 된다
용량?이 약간 더 나가는 대신 좀 더 편히 쓸 수 있는 것 같다
--------------------------------
19-1-2
맞춤
--------------------------------
19-1-3
맞춤
--------------------------------
19-2-1
트라이 자료구조는 타이핑만 했다
모르더라도 백준 사이트에 돌려는 봐야 할 것 같다
이전에 올린 코드가 틀렸다고 나온다
내가 오타가 난 것인지 확인해봐야 겠다