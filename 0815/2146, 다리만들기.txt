from collections import deque
import sys
input = sys.stdin.readline

def BFS1(x,y,cnt):
    q.append([x,y])     #함수 호출하며 받은 좌표 입력
    check[x][y] = cnt       #cnt를 check에 표시
    while q :
        r, c = q.popleft()
        for i in range(4):
            nr = r+dr[i]
            nc = c+dc[i]
            if 0<=nr<N and 0<=nc<N:     #표 안에 있는지
                if graph[nr][nc] == 1 and check[nr][nc] == 0:   #섬이지만 방문한 적이 없는지
                    check[nr][nc] = cnt     #몇번째 섬인지 표시
                    q.append([nr,nc])   #다음 좌표 입력
                elif graph[nr][nc] ==0: #섬의 가장자리에 있는 좌표
                    q2.append([r,c])
def BFS2():
    for v in range(N):                      #섬 간의 거리 초기화
                for w in range(N):
                    distance[v][w]=0
    while q2:
        r, c = q2.popleft()
        for i in range(4):
            nr = r+dr[i]
            nc = c+dc[i]
            #printf()
            if 0<=nr<N and 0<=nc<N:
                if graph[nr][nc] == 1 and check[nr][nc] != cnt:
                    #print('=> %d %d / distance = %d' %(nr,nc,distance[r][c]))
                    return distance[r][c]           #섬일 경우 거리는 그 좌표 그대로
                if graph[nr][nc] == 0 and distance[nr][nc] == 0:
                    distance[nr][nc] = distance[r][c]+1#바다일 경우 거리는 이전까지의 값+1
                    q2.append([nr,nc])              #q2에는 다음 값을 입력
"""
def printf():
    for i in range(N):
        for j in range(N):
            print(check[i][j], end = ' ')
        print()
    print()
    for i in range(N):
        for j in range(N):
            print(distance[i][j], end = ' ')
        print()
    print()
             """       
N = int(input())
distance = [[0 for _ in range(N)] for _ in range(N)]    #거리를 나타내기 위한 2차원 배열


dr = [1,-1,0,0]
dc = [0,0,1,-1]

q, q2 = deque(), deque()#q는 섬에 방문했는지/몇번째 섬인지, q2는 해당 섬에서 최소로 다른섬으로 갈 수 있는지 확인할때 쓰는 queue
graph = [list(map(int,input().split())) for _ in range(N)]
#위에 식을 이용하면 별도의 식 없이 이차원배열로 작성 가능
#graph = [[0 for _ in range(N)] for _ in range(N)]
#이 식을 이용하면 다시 입력해야한다.

check = [[0 for _ in range(N)] for _ in range(N)]

cnt = 1
ans = sys.maxsize   #최솟값을 구하는 문제에서 얼마가 최솟값일지 모르니 일단 최댓값을 준다

for i in range(N):      #방문한 섬인지 아닌지 check 표시하는 알고리즘
    for j in range(N):
        if graph[i][j] == 1 and check[i][j] == 0:   #i,j로 총 섬의 갯수 중 몇번째 섬인지
            BFS1(i, j, cnt)
            #printf()            
            res = BFS2()
            while q2:
                q2.pop()
            cnt += 1
            #printf()
            ans = min(ans, res)
    
print(ans)