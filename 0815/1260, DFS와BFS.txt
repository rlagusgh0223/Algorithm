from collections import deque
n, m, v = map(int, input().split())     #정점, 간선, 시작점
visited = [0 for _ in range(n+1)]       #정점에 들른적이 있는지 체크
graph = [[0 for _ in range(n+1)] for _ in range(n+1)]       #간선을 표시하기 위한 2차원 배열

for _ in range(m):                          #간선 입력하는거니까 간선수만큼 반복문
    a, b = map(int, input().split())        #ex) 13이면 [1][3],[3][1]에 1 입력
    graph[a][b] = 1
    graph[b][a] = 1

def DFS(x):         #n은 전역변수라 입력하지 않아도 돌아간다
    print(x, end=' ')       #시작점은 아래 식에선 표시되지 않으므로 미리 출력한다
    for i in range(1,n+1):          #0에서 n-1까지 하면 헷갈리니까 1에서 n까지
        if graph[x][i] == 1 and visited[i]==0:  #간선(graph)이 있고, 방문한 적(visited)이 없으면 조건문 수행
            visited[i]=1    #방문한적 있다고 표시
            DFS(i)              #재귀함수를 위해 

def BFS(x):
    q = deque()     #q를 큐로 선언
    q.append(x)     #q에 시작점 입력
    while len(q) != 0:      #BFS시작은 반드시 이걸로 할 것 / q의 값이 없어질때까지 반복
        now = q.popleft()   #변수 now 에 큐에서 나온값 입력
        print(now, end=' ') #변수 now 출력
        for i in range(1,n+1):          #0에서 n-1까지 하면 헷갈리니까 1에서 n까지
            if graph[now][i] == 1 and visited[i]==1:  #간선(graph)이 있고, 방문한 적(visited)이 없으면 조건문 수행
                visited[i]=2    #방문한적 있다고 표시
                q.append(i)     #q에 간선 연결된 정점 입력

visited[v]=1#처음 시작하라고 한 값(v)은 방문한걸로 간주(1)
DFS(v)
print()
visited[v]=2#처음 시작하라고 한 값(v)은 방문한걸로 간주(2)
BFS(v)