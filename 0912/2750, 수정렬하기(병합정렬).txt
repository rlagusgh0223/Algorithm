#병합정렬(머지정렬)
import sys

n = int(sys.stdin.readline())       	#정렬할 정수의 개수 입력
x = []                              		#정렬할 정수 받은 리스트 선언
for i in range(n):                  	#리스트에 정렬할 정수 입력
    x.append(int(sys.stdin.readline()))

def merge(x):
    if len(x) < 2:
        return x
    mid = len(x) // 2
    low_arr = merge(x[:mid])
    high_arr = merge(x[mid:])

    merge_arr = []
    l = h = 0
    while l < len(low_arr) and h < len(high_arr):
        if low_arr[l] < high_arr[h]:
            merge_arr.append(low_arr[l])
            l += 1
        else:
            merge_arr.append(high_arr[h])
            h += 1
    merge_arr += low_arr[l:]
    merge_arr += high_arr[h:]
    return merge_arr
    
array = merge(x)
for i in array:
    print(i)



#또 다른 풀이
import sys

n = int(sys.stdin.readline())       	#정렬할 정수의 개수 입력
x = []                              		#정렬할 정수 받은 리스트 선언
for i in range(n):                  	#리스트에 정렬할 정수 입력
    x.append(int(sys.stdin.readline()))
y = [0]*len(x)

def sort(start, end):
    if start >= end:    #크기가 1인 경우
        return 
    mid = (start+end) // 2
    sort(start, mid)    #받은 리스트의 반씩 재귀함수로 나눠줌
    sort(mid+1, end)
    merge(start, end, mid)    #다 나눴으면 다시 합쳐주기 위해 merge함수 호출
    
def merge(start, end, mid):
    i, j, k = start, mid+1, 0
    while i<=mid and j<=end:
        if x[i]<=x[j]:  #현재 리스트에서 받을 값이 중간값보다 작거나 같은경우
            y[k] = x[i]
            k+=1
            i+=1
        else:           #x[i]>x[j]인 경우 즉, 현재 리스트에서 받을 값이 중간값보다 큰 경우
            y[k] = x[j]
            k+=1
            j+=1
    while i<=mid:       #리스트의 값을 모두 넘겨준다
        y[k] = x[i]
        k += 1
        i += 1
    while j<=end:       #위의 경우 i나 j가 남아있어도 다른 하나가 조건에 충족하면 내려오게되므로 여기서 다 채운다
        y[k] = x[j]
        k+=1
        j+=1
    for i in range(start,end+1):
        x[i] = y[i-start]       #임시배열에 값을 원래 배열에 넘겨줌
            
    
sort(0,len(x)-1)
for i in x:
    print(i)